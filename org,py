import logging

import pandas as pd

from organization.constants import ORG_FULL_NAME
from organization.hierarchy import OrganizationHierarchy
from organization.similarity import OrganizationSimilarityAnalyzer

# ログの設定
logging.basicConfig(level=logging.INFO)


def split_org_hierarchy(df, full_name_col="group_full_name"):
    """
    組織のフルネームを階層ごとに分割し、新しい列を追加します。

    Parameters:
    - df: pandas.DataFrame - 組織情報を含むデータフレーム
    - full_name_col: str - 組織のフルネームを含む列の名前

    Returns:
    - df: pandas.DataFrame - 階層ごとの列が追加されたデータフレーム
    """
    # 最大階層数を取得
    max_rank = df[full_name_col].str.count("/").max() + 1

    # 階層ごとに列を追加
    for rank in range(1, max_rank + 1):
        col_name = f"group_full_name_rank{rank}"
        df[col_name] = df[full_name_col].apply(
            lambda x: "/".join(x.split("/")[:rank]) if pd.notnull(x) else None
        )

    return df


def preprocess_user_df(user_df):
    """
    ユーザーデータフレームを前処理し、各ユーザーが所属するgroup_full_nameごとに行を分割します。
    """
    # group列をカンマで分割
    user_df["group_list"] = user_df["group"].str.split(",")

    # エクスプロードして各ユーザーが所属するグループごとに行を複製
    user_exploded = user_df.explode("group_list")

    # 前後のスペースを削除
    user_exploded["group_list"] = user_exploded["group_list"].str.strip()

    print(user_exploded)

    # 必要な列のみ抽出し、列名を変更
    return user_exploded[["user_code", "group_list"]].rename(
        columns={"group_list": "group_full_name"}
    )


def main():
    # サンプルデータの作成（実際のデータを使用してください）
    data1 = {
        ORG_FULL_NAME: [
            "Company/Sales",
            "Company/Sales",
            "Company/Engineering/Software",
            "Company/Engineering/Hardware",
            "Company/HR",
        ],
        "user_code": ["U1", "U2", "U3", "U4", "U5"],
    }

    data2 = {
        ORG_FULL_NAME: [
            "Company/Sales",
            "Company/Engineering/Software",
            "Company/HR",
            "Company/Marketing",
        ],
        "user_code": ["U2", "U3", "U5", "U6"],
    }

    df1 = pd.DataFrame(data1)
    df2 = pd.DataFrame(data2)

    # データ型の最適化
    df1[ORG_FULL_NAME] = df1[ORG_FULL_NAME].astype("category")
    df2[ORG_FULL_NAME] = df2[ORG_FULL_NAME].astype("category")

    hierarchy1 = OrganizationHierarchy(df1)
    hierarchy2 = OrganizationHierarchy(df2)
    hierarchy1.process()
    hierarchy2.process()

    # 類似度分析
    analyzer = OrganizationSimilarityAnalyzer(hierarchy1, hierarchy2)
    final_all_similarity_metrics_df = analyzer.compute_similarities()

    # 必要な列を選択し、名前を変更
    # final_all_similarity_metrics_df = similarity_metrics_df[
    #     [
    #         ORG_HIERARCHY_X,
    #         ORG_HIERARCHY_Y,
    #         "intersection_size",
    #         "num_users_df1",
    #         "num_users_df2",
    #         "jaccard_index",
    #         "cosine_similarity",
    #         "sorensen_dice",
    #         "overlap_coefficient",
    #         "same_org_name",
    #     ]
    # ]

    print("\n全ての組織ペアのジャッカード指数および追加の類似度指標:")
    print(final_all_similarity_metrics_df)

    # データの出力
    # final_all_similarity_metrics_df.to_csv("all_similarity_metrics.csv", index=False)
    # final_all_similarity_metrics_df.to_json(
    #     "all_similarity_metrics.json", orient="records", force_ascii=False
    # )


if __name__ == "__main__":
    main()
